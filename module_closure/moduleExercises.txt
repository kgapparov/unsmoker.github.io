
1.  Determine what this Javascript code will print out (without running it):

x = 1;
var a = 5;
var b = 10;
var c = function(a, b, c) {
    document.write(x);
    document.write(a);
    var f = function(a, b, c) {
        b = a;
        document.write(b);
        b = c;
        var x = 5;
    }
    f(a,b,c);
    document.write(b);
    var x = 10;
 }

c(8,9,10);
document.write(b);
document.write(x);
}
Answer : 1 8 8 9 10 1; 

2. Define Global Scope and Local Scope in Javascript.
Global scope is window scope varibales, env variables and counters or function common variables uses this type
local scope is function scope, each funtions in js has own scope. It make it clear, prevents namespace collisions. 

3. Consider the following structure of js code: 

    //Scope A 
    function XFunc(){
        //Scope B 
        function YFunc() {
            //Scope C 
        };
    };
(a) Do statements in Scope A have access to variables defined in Scope B and C ?
    A) no. 
(b) Do statements in Scope B have access to variables defined in Scope A?
    A) yes 
(c) Do statements in Scope B have access to variables defined in Scope C?
    A) No 
(d) Do statements in Scope C have access to variables defined in Scope A and C ?
    A) Yes 

4. What will be printed by the following ? 

var x = 9;
function myFunction() {
    return x*x; 
}
document.write(myFunction());
x = 5;
document.write(myFunction());

A: 81 25

5.
var foo = 1;
function bar() {
    if (!foo) {
        var foo = 10;
    }
    alert(foo);
}
bar();
What will the alert print out? (Answer without running the code. Remember ‘hoisting’.)?
A. 10  (shadowing 1 inside function outside stil 1)

6. Consider the following definition of an add( ) function to increment a counter variable:
var add = (function () {
    var counter = 0;
    return function () {
        return counter += 1;
    }
 })();
 
Modify the above module to define a count object with two methods: add( ) and reset( ). The count.add( ) method
adds one to the counter (as above). The count.reset( ) method sets the counter to 0.

A) 
var Counter = (function (){
    var _counter; 
    _counter = 0;
    return {
        add: function () {
        _counter+=1;
        },
        reset: function () {
            _counter = 0;
        },
        value: function() {
        return _counter;
        }
    }
})();

Counter.add(); 
Counter.value();
1
Counter.reset();
Counter.value();
0

7. In the definition of add( ) shown in question 6, identify the "free" variable. In the context of a function closure,
what is a "free" variable?
A) free variable is counter, wich is accessible under return function() { SCOPE }, 

8. The add( ) function defined in question 6 always adds 1 to the counter each time it is called. Write a definition
of a function make_adder(inc), whose return value is an add function with increment value inc (instead of 1). Here
is an example of using this function:
add5 = make_adder(5);
add5( ); add5( ); add5( ); // final counter value is 15
add7 = make_adder(7);
add7( ); add7( ); add7( ); // final counter value is 21

A: 
var makeAdder = (function () {
    var counter = 0;
    return function (number) {
        return counter += number;
    }
 })();

 var add5 = function () {
     return makeAdder(5);
 }
 var add7 = function () {
     return makeAdder(7);
 }

9. . Suppose you are given a file of Javascript code containing a list of many function and variable declarations. All of
these function and variable names will be added to the Global Javascript namespace. What simple modification to
the Javascript file can remove all the names from the Global namespace?
A) if we consider it as Module pattern approach then I would dot this: 
    (function () {
       // old body 
    })()
    after this action all variables will be private, or public under one variable name myModule. (my suggestion.)

10. Using the Revealing Module Pattern, write a Javascript definition of a Module that creates an Employee Object
with the following fields and methods:

Private Field: name
Private Field: age
Private Field: salary
Public Method: setAge(newAge)
Public Method: setSalary(newSalary)
Public Method: setName(newName)
Private Method: getAge( )
Private Method: getSalary( )
Private Method: getName( )
Public Method: increaseSalary(percentage) // uses private getSalary( )
Public Method: incrementAge( ) // uses private getAge( )


var Employee  = (function(){
    var _name;
    var _age; 
    var _salary; 
    //private methods 
    var _getAge = function () {
        return _age;
    }
    var _getSalary = function() {
        return _salary;
    }
    var _getName = function() {
        return _name; 
    }
    //public methods; 
    var setAge = function(newAge) {
        _age = newAge;
    }
    var setSalary= function (newSalary)  {
        _salary = newSalary; 
    }
    var setName = function (newName)  {
        _name = newName;
    }
    var increaseSalary = function(percentage) {
        let salary = _getSalary();
        setSalary(salary*(1 + percentage/100));
    }
    var incrementAge = function() {
        let age = _getAge();
        setAge(age + 1);
    }
    return function (){
        return {
        setAge : setAge, 
        setName : setName, 
        setSalary: setSalary,
        increaseSalary : increaseSalary,
        incrementAge: incrementAge   
        }
    }
})();

11. Rewrite your answer to Question 10 using the Anonymous Object Literal Return Pattern.

var Employee  = (function(){
    var _name;
    var _age; 
    var _salary; 
    //private methods 
    var _getAge = function () {
        return _age;
    }
    var _getSalary = function() {
        return _salary;
    }
    var _getName = function() {
        return _name; 
    }
    var incrementAge = 
    return function (){
        return {
        setAge : function(newAge) {
                    _age = newAge;
                }, 
        setName : function (newName)  {
                    _name = newName;
                  }, 
        setSalary: function (newSalary)  {
                    _salary = newSalary; 
                   },
        increaseSalary : function(percentage) {
                            let salary = _getSalary();
                            setSalary(salary*(1 + percentage/100));
                        },
        incrementAge: function() {
                        let age = _getAge();
                        setAge(age + 1);
                    }   
        }
    }
})();

12.  Rewrite your answer to Question 10 using the Locally Scoped Object Literal Pattern.

var Employee  = (function(){
    var _name;
    var _age; 
    var _salary; 
    //private methods 
    var _getAge = function () {
        return _age;
    }
    var _getSalary = function() {
        return _salary;
    }
    var _getName = function() {
        return _name; 
    }
    var myLocalObject = {};
    myLocalObject.setAge = function(newAge) {
                    _age = newAge;
                }, 
    myLocalObject.setName = function (newName)  {
                    _name = newName;
                  }, 
    myLocalObject.setSalary = function (newSalary)  {
                    _salary = newSalary; 
                   },
    myLocalObject.increaseSalary = function(percentage) {
                            let salary = _getSalary();
                            setSalary(salary*(1 + percentage/100));
                        },
    myLocalObject.incrementAge = function() {
                        let age = _getAge();
                        setAge(age + 1);
                    }
    return myLocalObject;   
})();

13. Write a few Javascript instructions to extend the Module of Question 10 to have a public address field and
public methods setAddress(newAddress) and getAddress( ). 

var extEmployee = (function(emp){
    var address; 
    emp.setAddress = function (address) {
        this.address = address; 
    }
    emp.getAddress = function () {
        return this.address;
    }
    return emp;
})(Employee)

14. What is the output of the following code?
const promise = new Promise((resolve, reject) => {
    reject(“Hattori”);
    });
promise.then(val => alert(“Success: “ + val))
 .catch(e => alert(“Error: “ + e));

 A: 
    Error: Hattory 
    Because there are no any resolve implementation option. 

15. What is the output of the following code?
const promise = new Promise((resolve, reject) => {
    resolve(“Hattori”);
    setTimeout(()=> reject(“Yoshi”), 500);
});
promise.then(val => alert(“Success: “ + val))
 .catch(e => alert(“Error: “ + e));

 A) 
    Hattori
    resolve executes first; 


16. What is the output of the following code?
function job(state) {
 return new Promise(function(resolve, reject) {
 if (state) {
 resolve('success');
 } else {
 reject('error');
 }
 });
}
let promise = job(true);
promise.then(function(data) {
 console.log(data);
 return job(false);})
 .catch(function(error) {
 console.log(error);
 return 'Error caught';
});

A) success